name: Release

on:
  push:
    tags:
      - '*'

env: 
  CARGO_TERM_COLOR: always

jobs:
  build_release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        target: [x86_64-unknown-linux-gnu, x86_64-apple-darwin, aarch64-apple-darwin, x86_64-pc-windows-msvc]
        toolchain: [stable]
        exclude:
        # Don't test linux/windows targets on macos
        - os: macos-latest
          target: x86_64-unknown-linux-gnu
        - os: macos-latest
          target: x86_64-pc-windows-msvc
        # Don't test darwin/windows targets on ubuntu
        - os: ubuntu-latest
          target: x86_64-apple-darwin
        - os: ubuntu-latest
          target: aarch64-apple-darwin
        - os: ubuntu-latest
          target: x86_64-pc-windows-msvc
        # Don't test darwin/linux targets on ubuntu
        - os: windows-latest
          target: x86_64-apple-darwin
        - os: windows-latest
          target: aarch64-apple-darwin
        - os: windows-latest
          target: x86_64-unknown-linux-gnu

    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.toolchain }}
        components: rustfmt, clippy
        target: ${{ matrix.target }}
        override: true
    - run: rustup target add ${{ matrix.target }}
    - name: Install clang for ubuntu
      run: |
         if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt install -y clang
         fi
      shell: bash
    - name: Build
      run: cargo build --release --target=${{ matrix.target }}
    - name: Build
      run: cargo build --release --target=${{ matrix.target }}
    - name: Run tests
      run: cargo test --verbose
    - name: compress files
      run: zip -r ./target/${{ matrix.target }}.zip ./target/${{ matrix.target }}/release/
    - name: version
      run: echo "::set-output name=version::$(cargo pkgid | cut -d# -f2)"
      id: version
    - name: release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: false
        release_name: ${{ steps.version.outputs.version }}
        tag_name: ${{ github.ref }}
        body_path: VERSIONS.md
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Upload artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./target/${{ matrix.target }}.zip
        asset_name: ${{ matrix.target }}.zip
        asset_content_type: application/zip