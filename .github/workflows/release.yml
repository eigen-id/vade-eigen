name: Release

on:
  push:
    tags:
      - "*"

env:
  CARGO_TERM_COLOR: always

jobs:
  build_release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        target:
          [
            x86_64-unknown-linux-gnu,
            x86_64-apple-darwin,
            aarch64-apple-darwin,
            x86_64-pc-windows-msvc,
          ]
        toolchain: [stable]
        exclude:
          # Don't test linux/windows targets on macos
          - os: macos-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-pc-windows-msvc
          # Don't test darwin/windows targets on ubuntu
          - os: ubuntu-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-pc-windows-msvc
          # Don't test darwin/linux targets on windows
          - os: windows-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          components: rustfmt, clippy
          target: ${{ matrix.target }}
          override: true
      - run: rustup target add ${{ matrix.target }}
      - name: Install clang for ubuntu
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
               sudo apt install -y clang
          fi
        shell: bash
      - name: Build
        run: cargo build --release --target-dir=target/ --target=${{ matrix.target }}
      - name: Run tests
        run: cargo test --verbose
      - uses: haya14busa/action-cond@v1
        id: files
        with:
          cond: ${{ matrix.os == 'windows-latest' }}
          if_true: "vade_evan_cli.exe"
          if_false: "vade_evan_cli"
      - name: Compress files
        uses: vimtor/action-zip@v1
        with:
          files: target/${{ matrix.target }}/release/${{ steps.files.outputs.value }}
          dest: target/${{ matrix.target }}.zip
      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "target/${{ matrix.target }}.zip"
          bodyFile: "VERSIONS.md"
          replacesArtifacts: false
          token: ${{ github.token }}
          allowUpdates: true
